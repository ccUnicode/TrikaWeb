---
// Define las propiedades (props) que recibirá el componente
interface Props {
  id: string; // ID único para la conexión con el botón de apertura
  nombre: string;
  puntuacion: number;
  imagenSrc: string;
  descripcion: string;
  cursos: string[]; // Array de nombres de cursos
  estadisticas: {
    Didáctica: number;
    Dificultad: number;
    Material: number;
    'Justo al evaluar': number;
    Responsabilidad: number;
  };
  comentarios: {
    anonimo: string;
    texto: string;
  }[];
}

const {
  id,
  nombre,
  puntuacion,
  imagenSrc,
  descripcion,
  cursos,
  estadisticas,
  comentarios
} = Astro.props;

// Usaremos un porcentaje para el ancho de la barra (basado en un máximo de 5)
const getBarWidth = (valor: number) => `width: ${(valor / 5) * 100}%`;
---

<div
  id={`modal-${id}`}
  class="teacher-modal teacher-scroll fixed inset-0 bg-black/70 z-[100] hidden flex items-start md:items-center justify-center p-4 sm:p-6 overflow-y-auto overscroll-contain"
  aria-modal="true"
  role="dialog"
>

  <div
    class="bg-[#1e293b] text-white p-8 rounded-xl shadow-2xl max-w-4xl w-full mx-auto my-4 sm:my-8 font-sans relative
           max-h-[90vh] overflow-y-auto teacher-scroll"
  >
      
      <button id={`close-${id}`} type="button" class="absolute top-4 right-4 text-2xl text-gray-400 hover:text-white transition duration-200" aria-label="Cerrar">
          &times;
      </button>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          <div class="lg:col-span-1 space-y-4">
              <div class="w-full aspect-square overflow-hidden rounded-lg">
                  <img src={imagenSrc} alt={`Foto de ${nombre}`} class="w-full h-full object-cover"/>
              </div>
              
              <h2 class="text-2xl font-bold text-center py-2 bg-gray-900 rounded-md">{nombre}</h2>
              
              <div class="text-center mt-4">
                  <p class="text-gray-400 text-lg">Puntuación General</p>
                  <p class="text-5xl font-extrabold text-green-500">{puntuacion.toFixed(1)}</p>
              </div>
              
              <button class="w-full py-3 mt-4 text-lg font-semibold rounded-lg bg-green-500 hover:bg-green-600 transition duration-200">
                  Califica al profesor
              </button>
          </div>

          <div class="lg:col-span-1">
              <h3 class="text-xl font-bold mb-3 text-gray-300">Descripción</h3>
              <p class="text-sm text-gray-400 leading-relaxed border p-3 rounded-lg border-gray-700 bg-gray-800 h-40 overflow-auto teacher-scroll">
                  {descripcion}
              </p>

              <h3 class="text-xl font-bold mt-6 mb-3 text-gray-300">Estadísticas</h3>
              <div class="space-y-3">
                  {Object.entries(estadisticas).map(([key, value]) => (
                      <div class="flex items-center justify-between text-sm">
                          <span class="text-gray-400 w-1/2">{key}</span>
                          <div class="flex items-center w-1/2 space-x-2">
                              <div class="flex-grow h-2 bg-gray-700 rounded-full overflow-hidden">
                                  <div class={`h-full bg-blue-500`} style={getBarWidth(value)}></div>
                              </div>
                              <span class="font-semibold text-gray-300">{value.toFixed(1)}</span>
                          </div>
                      </div>
                  ))}
              </div>
          </div>

          <div class="lg:col-span-1">
              <h3 class="text-xl font-bold mb-3 text-gray-300">Cursos</h3>
              <div class="space-y-2 mb-6">
                  {cursos.map(curso => (
                      <div class="bg-gray-800 text-center py-2 rounded-md hover:bg-gray-700 transition duration-150 cursor-pointer">
                          {curso}
                      </div>
                  ))}
              </div>
              
              <h3 class="text-xl font-bold mb-3 text-gray-300">Comentarios</h3>
              <div class="space-y-4 max-h-64 overflow-y-auto pr-2 teacher-scroll">
                  {comentarios.map(comentario => (
                      <div class="p-3 bg-gray-800 rounded-lg text-sm border border-gray-700">
                          <p class="font-semibold mb-1 text-gray-300">{comentario.anonimo}</p>
                          <p class="text-gray-400 italic text-xs leading-snug">{comentario.texto}</p>
                      </div>
                  ))}
              </div>
          </div>
      </div>
  </div>
</div>

<script define:vars={{ id }} is:inline>
    // Variables se pasan desde el frontmatter gracias a define:vars
    const modal = document.getElementById(`modal-${id}`);
    const closeButton = document.getElementById(`close-${id}`);
    const openButton = document.getElementById(`open-${id}`); // Debe estar definido en la página que lo llama

    if (modal && openButton && closeButton) {
        
        const closeModal = () => {
            modal.classList.add('hidden');
            document.body.style.overflow = ''; // Habilita el scroll del fondo
        };

        // Abrir Modal
        openButton.addEventListener('click', () => {
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden'; // Deshabilita el scroll del fondo
        });

        // Cerrar con el botón X
        closeButton.addEventListener('click', closeModal);

        // Cerrar haciendo clic en el fondo (overlay)
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
        
        // Cerrar con la tecla ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
                closeModal();
            }
        });
    }
</script>