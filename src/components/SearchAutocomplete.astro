---
export interface Props {
  id: string; // identificador base (ej: "plancha")
  placeholder?: string;
  targetSelector: string; // selector de cards (ej: ".plancha-card")
  fields?: string; // para sugerencias, separado por comas. ej: "curso,evaluacion,ciclo"
  filter?: string; // campos a filtrar, separado por comas. ej: "curso,evaluacion,ciclo,solucion"
  class?: string;
}

const {
  id,
  placeholder = 'Buscar...',
  targetSelector,
  fields = 'curso,evaluacion,ciclo',
  filter = 'curso,evaluacion,ciclo,solucion',
  class: extraClass = ''
} = Astro.props as Props;

const inputId = `${id}-search`;
const clearId = `clear-${id}-search`;
const listId = `${id}-suggestions`;
---

<div class={`relative w-full ${extraClass}`} data-autocomplete data-target-selector={targetSelector} data-fields={fields} data-filter={filter}>
  <label for={inputId} class="sr-only">{placeholder}</label>
  <input
    id={inputId}
    type="search"
    placeholder={placeholder}
    class="w-full rounded-full bg-global-bg text-global-text placeholder:text-global-text-muted px-4 py-3 focus:outline-none focus:ring-2 focus:ring-[#51A624]"
    autocomplete="off"
    aria-autocomplete="list"
    aria-haspopup="listbox"
    aria-expanded="false"
  />

  <button id={clearId} type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-global-text-muted hover:text-global-text hidden" aria-label="Limpiar búsqueda">×</button>

  <ul
    id={listId}
    role="listbox"
    class="hidden absolute mt-2 z-50 w-full max-h-56 overflow-auto rounded-lg bg-global-bg shadow-lg border border-global-surface text-sm"
  ></ul>
</div>

<script type="module">
  function setup(root) {
    const input = root.querySelector('input[type="search"]');
    const list = root.querySelector('ul[role="listbox"]');
    const clearBtn = root.querySelector('button');

    const targetSelector = root.getAttribute('data-target-selector') || '';
    const fieldsStr = root.getAttribute('data-fields') || '';
    const filterStr = root.getAttribute('data-filter') || '';

    const fields = fieldsStr.split(',').map(s => s.trim()).filter(Boolean);
    const filterFields = filterStr.split(',').map(s => s.trim()).filter(Boolean);

    const normalize = (s = '') =>
      String(s)
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '');

    const getCards = () => Array.from(document.querySelectorAll(targetSelector));

    function buildSuggestions() {
      const cards = getCards();
      const map = new Map();
      cards.forEach(card => {
        fields.forEach(f => {
          const v = card.dataset && card.dataset[f] ? card.dataset[f].trim() : '';
          if (v) map.set(normalize(v), { text: v, type: f });
        });
      });
      return Array.from(map.values());
    }

    let suggestions = buildSuggestions();
    let activeIndex = -1;

    function renderSuggestions(listData) {
      if (!list || !input) return;
      if (!listData.length) {
        list.classList.add('hidden');
        input.setAttribute('aria-expanded', 'false');
        return;
      }
      list.innerHTML = listData.map((s, i) => `
        <li role="option" data-index="${i}" data-value="${s.text}" data-type="${s.type}" class="px-4 py-3 hover:bg-global-surface cursor-pointer">
          <div class="flex items-center justify-between">
            <span class="truncate">${s.text}</span>
            <small class="text-xs text-global-text-muted ml-3">${s.type}</small>
          </div>
        </li>
      `).join('');
      activeIndex = -1;
      list.classList.remove('hidden');
      input.setAttribute('aria-expanded', 'true');
    }

    function hideSuggestions() {
      if (!list || !input) return;
      list.classList.add('hidden');
      input.setAttribute('aria-expanded', 'false');
      activeIndex = -1;
      Array.from(list.children).forEach(ch => ch.classList.remove('bg-global-surface'));
    }

    function showClearIfNeeded() {
      if (!clearBtn || !input) return;
      if (input.value.trim().length > 0) clearBtn.classList.remove('hidden');
      else clearBtn.classList.add('hidden');
    }

    function filterCards() {
      const cards = getCards();
      if (!input) return;
      const q = input.value.trim();
      const tokens = normalize(q).split(/\s+/).filter(Boolean);
      cards.forEach(card => {
        const matches = tokens.length === 0 || tokens.every(t =>
          filterFields.some(f => {
            const ds = card.dataset && card.dataset[f] ? card.dataset[f] : '';
            return normalize(ds).includes(t);
          })
        );
        card.classList.toggle('hidden', !matches);
      });
    }

    if (input) {
      input.addEventListener('focus', () => { suggestions = buildSuggestions(); });

      input.addEventListener('input', (e) => {
        const target = e.target;
        const q = target && 'value' in target ? String(target.value).trim() : '';
        showClearIfNeeded();
        const nq = normalize(q);
        const results = nq ? suggestions.filter(s => normalize(s.text).includes(nq)).slice(0, 8) : [];
        renderSuggestions(results);
        filterCards();
      });

      input.addEventListener('keydown', (e) => {
        const key = 'key' in e ? e.key : '';
        const items = Array.from(list?.children || []);
        if (list?.classList.contains('hidden') || !items.length) {
          if (key === 'ArrowDown' && suggestions.length) {
            renderSuggestions(suggestions.slice(0, 8));
            e.preventDefault();
          }
          return;
        }

        if (key === 'ArrowDown') {
          activeIndex = Math.min(activeIndex + 1, items.length - 1);
          items.forEach(it => it.classList.remove('bg-global-surface'));
          items[activeIndex].classList.add('bg-global-surface');
          items[activeIndex].scrollIntoView({ block: 'nearest' });
          e.preventDefault();
        } else if (key === 'ArrowUp') {
          activeIndex = Math.max(activeIndex - 1, 0);
          items.forEach(it => it.classList.remove('bg-global-surface'));
          items[activeIndex].classList.add('bg-global-surface');
          items[activeIndex].scrollIntoView({ block: 'nearest' });
          e.preventDefault();
        } else if (key === 'Enter') {
          if (activeIndex >= 0 && items[activeIndex]) {
            const el = items[activeIndex];
            const val = el && 'dataset' in el ? el.dataset.value : undefined;
            input.value = val || '';
            hideSuggestions();
            showClearIfNeeded();
            filterCards();
            e.preventDefault();
          }
        } else if (key === 'Escape') {
          hideSuggestions();
        }
      });

      list?.addEventListener('click', (ev) => {
        const tgt = ev.target;
        if (!(tgt && tgt instanceof Element)) return;
        const li = tgt.closest('li[role="option"]');
        if (!li) return;
        const val = li && 'dataset' in li ? li.dataset.value : undefined;
        input.value = val || '';
        hideSuggestions();
        showClearIfNeeded();
        filterCards();
        input.focus();
      });

      clearBtn?.addEventListener('click', () => {
        input.value = '';
        clearBtn.classList.add('hidden');
        filterCards();
        hideSuggestions();
        input.focus();
      });

      document.addEventListener('click', (e) => {
        const tgt = e.target;
        if (!(tgt && tgt instanceof Element)) return;
        if (tgt.closest(`[id="${list?.id}"]`) || tgt.closest(`[id="${input?.id}"]`)) return;
        hideSuggestions();
      });
    }
  }

  function init() {
    const roots = Array.from(document.querySelectorAll('[data-autocomplete]'));
    roots.forEach(setup);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>
